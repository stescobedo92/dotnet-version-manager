name: Release

on:
  push:
    branches:
      - master

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            artifact_name: dver
            asset_name: dver-linux-amd64
          - os: windows-latest
            artifact_name: dver.exe
            asset_name: dver-windows-amd64.exe

    steps:
    - uses: actions/checkout@v2
    
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
        override: true
    
    - name: Build
      run: cargo build --release --verbose
    
    - name: Rename binary
      shell: bash
      run: |
        mv target/release/${{ matrix.artifact_name }} ${{ matrix.asset_name }}
    
    - name: Upload artifact
      uses: actions/upload-artifact@v2
      with:
        name: ${{ matrix.asset_name }}
        path: ${{ matrix.asset_name }}

  create_release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Get version from Cargo.toml
        id: get_version
        run: |
          version=$(grep '^version =' Cargo.toml | sed 's/.*= *"//' | sed 's/".*//')
          echo "::set-output name=version::$version"

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.get_version.outputs.version }}
          release_name: Release v${{ steps.get_version.outputs.version }}
          draft: false
          prerelease: false

      - name: Download all artifacts
        uses: actions/download-artifact@v2

      - name: Display structure of downloaded files
        run: ls -R

      - name: Upload Release Assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          for asset in dver-*; do
            echo "Uploading $asset..."
            curl --fail \
                 -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                 -H "Content-Type: application/octet-stream" \
                 --data-binary @"$asset" \
                 "${{ steps.create_release.outputs.upload_url }}?name=$(basename $asset)"
          done
