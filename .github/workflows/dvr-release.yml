name: Release

on:
  push:
    branches:
      - master

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            artifact_name: dver
            asset_name: dver-linux-amd64
          - os: windows-latest
            artifact_name: dver.exe
            asset_name: dver-windows-amd64.exe

    steps:
    - uses: actions/checkout@v2
    
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
        override: true
    
    - name: Build
      run: cargo build --release --verbose
    
    - name: Rename binary
      shell: bash
      run: |
        mv target/release/${{ matrix.artifact_name }} ${{ matrix.asset_name }}
    
    - name: Upload artifact
      uses: actions/upload-artifact@v2
      with:
        name: ${{ matrix.asset_name }}
        path: ${{ matrix.asset_name }}

  create_release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Get version from Cargo.toml
        id: get_version
        run: |
          version=$(grep '^version =' Cargo.toml | sed 's/.*= *"//' | sed 's/".*//')
          echo "VERSION=$version" >> $GITHUB_ENV

      - name: Download all artifacts
        uses: actions/download-artifact@v2
        with:
          path: artifacts

      - name: Display structure of downloaded files
        run: ls -R artifacts

      - name: Prepare assets for upload
        run: |
          mkdir release_assets
          find artifacts -type f -exec cp {} release_assets/ \;
          ls -R release_assets

      - name: Create Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          release_notes="dver v${{ env.VERSION }}"
          gh release create v${{ env.VERSION }} \
            --title "dver v${{ env.VERSION }}" \
            --notes "$release_notes" \
            --generate-notes

          # Upload executables
          for asset in release_assets/*; do
            if [ -f "$asset" ]; then
              echo "Uploading $asset"
              gh release upload v${{ env.VERSION }} "$asset" --clobber
            fi
          done

          # Upload source code
          gh release upload v${{ env.VERSION }} $(git archive --format=zip HEAD -o source-code.zip) --clobber
